// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
}

enum AccountStatus {
  PENDING
  ACTIVE
  INACTIVE
  SUSPENDED
}

model AuthUser {
  id               String             @id @default(cuid())
  name             String
  email            String             @unique
  password         String
  role             Role               @default(USER)
  verified         Boolean            @default(false)
  status           AccountStatus      @default(PENDING)
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  LoginHistory     LoginHistory[]
  VerificationCode VerificationCode[]
}

enum LoginAttempt {
  SUCCESS
  FAILED
}

model LoginHistory {
  id        String       @id @default(cuid())
  userId    String
  user      AuthUser     @relation(fields: [userId], references: [id], onDelete: Cascade)
  ip        String?
  userAgent String?
  attempt   LoginAttempt @default(SUCCESS)
}

enum VerificationStatus {
  PENDING
  USER
  EXPIRED
}

enum VerificationCodeType {
  ACCOUND_ACITVATION
  FORGOT_PASSWORD
  EMAIL_CHANGE
}

model VerificationCode {
  id        String               @id @default(cuid())
  userId    String
  user      AuthUser             @relation(fields: [userId], references: [id], onDelete: Cascade)
  code      String
  type      VerificationCodeType
  status    VerificationStatus
  expireAt  DateTime
  createdAt DateTime             @default(now())
  updatedAt DateTime             @updatedAt
  deletedAt DateTime?
  veriedAt  DateTime?
}
